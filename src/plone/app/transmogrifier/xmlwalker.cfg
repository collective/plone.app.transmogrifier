[transmogrifier]
pipeline =
# Import users from Apache users
    htpasswd
    encrypted
    roles
    domains
    groups
    addUser

# Initialize the pipeline
    dirwalker
    breaker
    url
    drop-seen-urls

# Beginning of the crawling/spidering recursion
    deferred
    crawled

# Update content link elements before original item's 'text' is generated
    redirect
    keep-seen-nav

# Extract content data from parents
    parent-path-from-parent
    parent-path-from-path
    delete-parent

# Extract content information from response and parsed XML
    urlopen
    redirected-url
    is-external
    remoteUrl
    parse
    empty-tree
    title
    id
    description
    subject
    modificationDate
    content
    html-file

# Assemble the path and type
    type
    path
    drop-seen-paths
    seen
    context
    resolve-context
    unique
    folders
    excludeFromNav

# Parse XML trees for heirarchy/structure and for links to crawl/spider
    walk-content

    relatedItems-tree
    walk-relatedItems
    relatedItems

    left-nav
    walk-left-nav

    nav
    walk-nav

    delete-trees
    
# Send newly crawled/spidered links back to the top, recurse
    log-dropped
    drop
    log-crawled
    crawl

# Add the content
#    blob
    debug
    drop-construct
    default-content
    log-content
    disable_versioning
    construct
    enable_versioning

# Defer some keys that need redirector entries from other content
    log-deferred
    defer-links
    redirect
    context
    resolve
    text
    delete-content
    file

# Update the content
    update
    close

    transitions
    publish

    defaultpage
    browserdefault

    reindexobject

# Free memory in batches of transactions
    savepoint


## Initialize the pipeline with a URL to crawl

[default-content]
# Hide Plone's default OOTB content
blueprint = collective.transmogrifier.sections.csvsource
filename = plone.app.transmogrifier:default-content.csv

[dirwalker]
# Start the pipeline with at least a root directory,
#   optionally follow with a directory structure
blueprint = collective.transmogrifier.sections.dirwalker
dirname = plone.app.transmogrifier:empty-site

[url]
# Set the URL to crawl, relative to the url option
blueprint = collective.transmogrifier.sections.inserter
key = string:_url
ignore-patterns =
    *.htaccess
    sitemap.xml
    sitemap.xml.gz
condition = python:'_path' in item and not [
   pattern for pattern in set("""${url:ignore-patterns}""".split())
   if modules['fnmatch'].fnmatch(item['_path'], pattern)]
# Set the `netloc` option to define the root URL to crawl
#netloc = foo.com
# You may optionally override the scheme or path
#   to further specify the root URL
scheme = http
path = /
root = ${url:scheme}://${url:netloc}${url:path}
value = python:modules['urlparse'].urlsplit(modules['urlparse'].urljoin(
      options['root'], modules['urllib'].quote(item['_path'])))

[drop-seen-urls]
# Don't process walked directories for URLs that were walked from nav
blueprint = collective.transmogrifier.sections.condition
condition = python:'_url' not in item or
    item['_url'].geturl() not in transmogrifier.__annotations__.get(\
        'xmlwalker.paths', {})


## Central crawling loop
#    This is the source for items deferred until redirections are processed
[deferred]
blueprint = collective.transmogrifier.sections.listsource
#    This is the source for items from links that are crawled
[crawled]
# Emit crawled items before deferred ones
blueprint = collective.transmogrifier.sections.listsource


[keep-seen-nav]
# Only process paths for seen URLs when they're from nav
blueprint = collective.transmogrifier.sections.condition
condition = python:'_url' not in item\
    or item['_url'].geturl() not in transmogrifier.__annotations__.get(\
        'xmlwalker.paths', {})\
    or ('_has_element' in item and '_content_element' not in item)


## Extract content data from parents
# Any parent information that depends on the parent crawling response
# and is needed by it's children, such as paths, must be extracted
# after the walked items to be crawled get sent back to the list
# source because the crawled items must be exhausted before the list
# source will emit the parents

[parent-path-from-parent]
blueprint = collective.transmogrifier.sections.inserter
key = string:_parent_path
condition = python:'_parent_path' not in item and '_parent' in item
value = python:(item['_parent'].get('_type') == 'Folder'\
    and item['_parent']['_path']) or item['_parent'].get(\
        '_parent_path', modules['posixpath'].dirname(item['_parent']['_path']))

[parent-path-from-path]
blueprint = collective.transmogrifier.sections.inserter
key = string:_parent_path
condition = python:'_parent_path' not in item and '_path' in item
value = python:modules['posixpath'].dirname(item['_path'])
        
# Free reference to parent
[delete-parent]
blueprint = collective.transmogrifier.sections.manipulator
condition = exists:item/_parent
delete = _parent

[redirected-url]
blueprint = collective.transmogrifier.sections.inserter
key = string:_redirected_url
condition = python:(item.get('_headers') and item.get('_url') and
        item['_url'].geturl() != item['_headers'].get('url'))
value = python:modules['urlparse'].urlsplit(modules['urlparse'].urljoin(
      transmogrifier['url']['root'], item['_headers']['url']))

[is-external]
blueprint = collective.transmogrifier.sections.inserter
key = string:_is_external
url = (item.get('_redirected_url') or item.get('_url'))
# Prefer the URL resulting from any redirects
condition = python:(${is-external:url} and
    not ${is-external:url}.geturl().startswith(transmogrifier['url']['root']))
value = python:True

[remoteUrl]
blueprint = collective.transmogrifier.sections.inserter
key = string:remoteUrl
condition = python:('remoteUrl' not in item and (
# Use Links for nav elements to external URLs or already crawled internal URLs
        '_content_element' not in item and item.get('_url')\
        and (not item.get('_is_defaultpage')\
             and item['_url'].geturl() in\
             transmogrifier.__annotations__.get('xmlwalker.paths', {})))
# Use a link for redirects
    or item.get('_redirected_url'))
value = python:((item.get('_is_external') and ${is-external:url}.geturl())
    or ${is-external:url}.path)


# Extract content information from response and parsed XML

[urlopen]
blueprint = collective.transmogrifier.sections.urlopener
# Ignore Apache's "403: Forbidden" error
#   when directory indexes are denied and there's no DirectoryIndex
ignore-error = python:error.code == 403 and item.get('_type') == 'Folder'

[parse]
blueprint = collective.transmogrifier.sections.inserter
key = string:_tree
condition = python:item.get('_headers') and item.get('_cache')\
    and item['_headers'].get('content-type', '').startswith('text/html')
value = python:modules['lxml.etree'].parse(\
    item['_cache'], modules['lxml.html'].HTMLParser(\
        encoding=item.get('_headers', {}).get('charset', 'utf-8')))

[empty-tree]
blueprint = collective.transmogrifier.sections.manipulator
condition = not:item/_tree/getroot|nothing
delete = _tree


## Extract content data from XML trees

[title]
blueprint = collective.transmogrifier.sections.inserter
# Customise xpath to change title extraction
xpath = /html/head/title
# Keep nav title for folders
#   assume items without types will be folders with default pages when crawled
key = python:item.get('_type') == 'Folder' and '_defaultpage' or 'title'
# Keep nav title for links, use /head/title for everything else
condition = ${description:condition} and not item.get('remoteUrl')
value-python = u' '.join(element.text_content().strip() for element in\
                         item['_tree'].xpath(options['xpath']))
value = python:${title:value-python}

[id]
blueprint = plone.app.transmogrifier.urlnormalizer
locale = string:en

[description]
blueprint = collective.transmogrifier.sections.inserter
key = string:description
xpath = /html/head/meta[@name='description']/@content
condition = python:'_tree' in item and item['_tree'].xpath(options['xpath'])
value = python:u' '.join(element.strip() for element in\
    item['_tree'].xpath(options['xpath']))

[subject]
blueprint = collective.transmogrifier.sections.inserter
key = string:subject
xpath = /html/head/meta[@name='keywords']/@content
condition = ${description:condition}
value = python:u','.join(element.strip() for element in \
    item['_tree'].xpath(options['xpath'])).split(',')

[modificationDate]
blueprint = collective.transmogrifier.sections.inserter
key = string:modificationDate
condition = python:'_headers' in item and item['_headers'].get('last-modified')
value = python:item['_headers']['last-modified']

[content]
blueprint = collective.transmogrifier.sections.inserter
key = string:_content
# Don't crawl Folders
condition = python:'_tree' in item and item.get('_type') != 'Folder'\
# Don't crawl Links, also prevents loops on nav Link items
    and 'remoteUrl' not in item
# Customize this xpath expression to isolate the content body elements
xpath = //*[@id='content' or contains(@class, 'content')]/*
value = python:item['_tree'].xpath(options['xpath'])

[html-file]
# Treat HTML URLs with no recognized content body as whole static HTML files
# without the Plone framing
blueprint = collective.transmogrifier.sections.inserter
key = string:_type
condition = python:not item.get('_type') and item.get('_headers', {}).get(\
    'content-type', '').startswith('text/html') and not item.get('_content')
value = string:File

## Assemble the path and type

[type]
blueprint = collective.transmogrifier.sections.inserter
key = string:_type
# How much of the body to classify,
#   default to the OFS.Image.File linked Pdata chunk size
size = 65536
findTypeName = transmogrifier.context.content_type_registry.findTypeName(\
# Use the extension of the original URL
    getattr(item.get('_url'), 'path', '')\
# Remote URLs should be Links, use a *.url extension
    + (('remoteUrl' in item and not item.get('_is_defaultpage')\
        and '.url') or ''),\
# Use MIME type from respone
    item.get('_headers', {}).get('content-type', ''),\
# Read only some of the file for classification
    'text' in item and item['text']\
    or ('_cache' in item and open(item['_cache']).read(${type:size}))\
    or '')
condition = python:not item.get('_type') and ${type:findTypeName}
value = python:${type:findTypeName}

[path]
blueprint = collective.transmogrifier.sections.inserter
key = string:_path
condition = item/_url|nothing
dirname = item.get('_parent_path', modules['posixpath'].dirname(\
    item.get('_url') and modules['urllib'].unquote(item['_url'].path)\
     or item.get('remoteUrl',\
         item.get('_path', transmogrifier['url']['path']))))
basename = (item.get('_type') not in ('File', 'Image') and item.get('_id'))\
     or modules['posixpath'].basename(\
        item.get('_url') and modules['urllib'].unquote(item['_url'].path)\
        or item.get('remoteUrl', item.get('_path')))
value = python:modules['posixpath'].join(\
# Content links have no structure
    '_content_element' in item and modules['posixpath'].join(\
        ${path:dirname}, modules['posixpath'].dirname(\
            modules['urllib'].unquote(item['_url'].path)))\ 
    or ${path:dirname}, ${path:basename})

[drop-seen-paths]
blueprint = collective.transmogrifier.sections.condition
condition = python:'_url' not in item or (\
# Don't create Links for content elements
    ('_content_element' not in item or item['_url'].geturl() not in\
     transmogrifier.__annotations__.get('xmlwalker.paths', {}))\
# Don't re-process nav elements for the same path and URL
    and (item.get('_path') not in \
    transmogrifier.__annotations__.get('xmlwalker.paths', {}).get(\
        item['_url'].geturl(), set())))

[seen]
blueprint = collective.transmogrifier.sections.inserter
key = string:_seen
condition = python:item.get('_url') and '_path' in item \
    and item.get('_type') != 'Folder'\
# Just add the seen path, don't insert a key
    and transmogrifier.__annotations__.setdefault(\
       'xmlwalker.paths', {}).setdefault(\
           item['_url'].geturl(), set()).add(item['_path'])
value = nothing

[context]
blueprint = collective.transmogrifier.sections.manipulator
condition = exists:item/_path
keys = _path
destination = string:_context

[resolve-context]
blueprint = collective.transmogrifier.sections.pathresolver
keys = _context

[unique]
blueprint = collective.transmogrifier.sections.inserter
key = string:_path
condition = python:item.get('_path', '/') != '/'\
    and item.get('_context') is not None\
# Shoule be a new object if the previous item's path has a different URL
    and (item.get('_url') and item['_url'].geturl() not in\
         transmogrifier.__annotations__.get('xmlwalker.paths', {}))
value = python:modules['posixpath'].join(
    modules['posixpath'].dirname(item['_path']),
    modules['zope.container.interfaces'].INameChooser(item['_context']
        ).chooseName(modules['posixpath'].basename(
            item['_path']), item['_context']))

[folders]
blueprint = collective.transmogrifier.sections.folders

[excludeFromNav]
blueprint = collective.transmogrifier.sections.inserter
key = string:excludeFromNav
value = python:True
# Exclude all items from nav if only linked from content
condition = python:'excludeFromNav' not in item and (\
    '_content_element' in item or '_has_element' not in item)


## Get links to crawl from content body next

[walk-content]
blueprint = collective.transmogrifier.sections.xmlwalker
trees = python:'_tree' in item and item.get('_content')
xpath = (@href | @src)[.!='' and not(starts-with(., '#'))]
type-key = nothing
is-default-page-key = nothing
attribs = ['href', 'src']
element-keys =
    _has_element
    _old_paths
    _url
    _is_external
    title

    _content_element
    _parent

# Content links are always relative to crawled page
element-_parent = tree_item
element-_content_element = python:item['_old_paths'] \
    and element.attrib.update([\
    (attr, item['_old_paths'][idx])\
    for idx, attr in enumerate([attrib for attrib in ${walk-content:attribs}\
                                if attrib in element.attrib])]) or element

# Extract information from walked element
element-_has_element = python:len(element)
# Normalize the absolute version of the link
element-_old_paths = python:[modules['posixpath'].abspath(\
    modules['urlparse'].urljoin(
        tree_item['_url'].path, modules['urlparse'].urlsplit(
            modules['urllib'].unquote(href.strip())).path))\
    for href in element.xpath("${walk-content:xpath}")\
# link has some path element, no empty links or fragment-only links
    if (modules['urlparse'].urlsplit(href.strip()).netloc or\
        modules['urlparse'].urlsplit(href.strip()).path)]
element-_url = python:item['_old_paths'] and (item.update(\
    _url=modules['urlparse'].urlsplit(\
        element.xpath("${walk-content:xpath}")[0].strip()))\
    or modules['urlparse'].SplitResult(\
        item['_url'].scheme or transmogrifier['url']['scheme'],\
        item['_url'].netloc or transmogrifier['url']['netloc'],\
        modules['urllib'].quote(item['_old_paths'][0]), '', ''))
element-_is_external = python:item['_url'] and not\
    item['_url'].geturl().startswith(transmogrifier['url']['root'])

element-title = python:unicode(element.text_content().strip()\
                               or element.attrib.get('alt', '').strip())


## Get related items from first left nav

[relatedItems-tree]
blueprint = collective.transmogrifier.sections.inserter
key = string:_relatedItems
condition = python:False
xpath = //*[contains(@class, 'nav-list')][2]
value = python:item['_tree'].xpath(options['xpath'])

[walk-relatedItems]
blueprint = collective.transmogrifier.sections.xmlwalker
trees = item/_relatedItems|nothing
xpath = ${walk-content:xpath}
type-key = ${walk-content:type-key}
is-default-page-key = ${walk-content:is-default-page-key}
element-keys = ${walk-content:element-keys}

# related items links are always relative to crawled page
element-_parent = ${walk-content:element-_parent}
element-_content_element = ${walk-content:element-_content_element}

element-_old_paths = ${walk-content:element-_old_paths}
element-_url = ${walk-content:element-_url}
element-_is_external = ${walk-content:element-_is_external}
element-title = ${walk-content:element-title}
element-_has_element = ${walk-content:element-_has_element}

[relatedItems]
blueprint = collective.transmogrifier.sections.inserter
key = string:relatedItems
condition = python:'relatedItems' not in item and '_relatedItems' in item\
    and item['_tree'].xpath("${relatedItems:xpath}")
xpath = (${relatedItems-tree:xpath}//*/@href\
    | ${relatedItems-tree:xpath}//*/@src)[.!='' and not(starts-with(., '#'))]
value = python:[modules['posixpath'].abspath(modules['urlparse'].urljoin(
    item['_parent_path'], href.strip())) for href
    in item['_tree'].xpath("${relatedItems:xpath}")]


## Get links to crawl from left navigation list

[left-nav]
blueprint = collective.transmogrifier.sections.inserter
key = string:_left_nav
condition = ${nav:condition}
# Customize this xpath expression to isolate the left navigation elements
xpath = //*[contains(@class, 'nav-list')][1]
value = python:item['_tree'].xpath(options['xpath'])

[walk-left-nav]
blueprint = collective.transmogrifier.sections.xmlwalker
trees = item/_left_nav|nothing
cache = true
element-keys =
    _has_element
    _old_paths
    _url
    _is_external
    title

element-_old_paths = ${walk-content:element-_old_paths}
element-_url = ${walk-content:element-_url}
element-_is_external = ${walk-content:element-_is_external}
element-title = ${walk-content:element-title}
element-_has_element = ${walk-content:element-_has_element}


## Get links to crawl from site nav first

[nav]
blueprint = collective.transmogrifier.sections.inserter
key = string:_nav
condition = python:'_tree' in item and 'remoteUrl' not in item
# Customize this xpath expression to isolate the navigation elements
xpath = //*[contains(@class, 'navbar')]//ul[contains(@class, 'nav')]
value = python:item['_tree'].xpath(options['xpath'])

[walk-nav]
blueprint = collective.transmogrifier.sections.xmlwalker
trees = item/_nav|nothing
cache = true
element-keys = ${walk-left-nav:element-keys}

element-_old_paths = ${walk-content:element-_old_paths}
element-_url = ${walk-content:element-_url}
element-_is_external = ${walk-content:element-_is_external}
element-title = ${walk-content:element-title}
element-_has_element = ${walk-content:element-_has_element}


## Free/remove memory intensive XML tree references
[delete-trees]
blueprint = collective.transmogrifier.sections.manipulator
delete =
    _tree
    _nav
    _left_nav
    _relatedItems


## Send child items back to the top of the crawl loop

[log-dropped]
blueprint = collective.transmogrifier.sections.logger
level = INFO
ignored-extensions = ${drop:ignored-extensions}
condition = not:${drop:condition}
key = _url

[drop]
blueprint = collective.transmogrifier.sections.condition
ignored-extensions =
# Only drop items to be crawled
condition = python:'_url' not in item or '_has_element' not in item\
# Only drop crawled items haven't already been crawled
    or '_cache' in item or (\
# Drop external links in content, let links in nav become Link content
    (not item.get('_is_external') or not '_content_element' in item)\
# skip certain file types
    and modules['posixpath'].splitext(\
        item['_url'].path or '_.html')[1] not in [\
        ext.strip() for ext in options['ignored-extensions'].split()\
        if ext.strip()])

[log-crawled]
blueprint = collective.transmogrifier.sections.logger
level = INFO
condition = ${crawl:condition}
key = _url

[crawl]
blueprint = collective.transmogrifier.sections.listappender
condition = python:'_cache' not in item and item.get('_url')
section = crawled


## Add the content

[drop-construct]
blueprint = collective.transmogrifier.sections.manipulator
# Do not add content for the portal itself
condition = python:item.get('_path') == '/'
delete = _type

[log-content]
blueprint = collective.transmogrifier.sections.logger
level = INFO
condition = python:item.get('_path') and item.get('_type')
key = _path

[disable_versioning]
blueprint = plone.app.transmogrifier.versioning.disable

[construct]
blueprint = collective.transmogrifier.sections.constructor

[enable_versioning]
blueprint = plone.app.transmogrifier.versioning.enable


## Defer some keys that need redirector entries from other content

[log-deferred]
blueprint = collective.transmogrifier.sections.logger
level = INFO
condition = ${defer-links:condition}
key = _path

[defer-links]
blueprint = collective.transmogrifier.sections.listappender
condition = python:item.get('_url') and (\
    '_content' in item or item.get('relatedItems') or item.get('remoteUrl'))
section = deferred
# Defer all field keys so that only one update is done
# '_content' will become 'text' after links have been updated from redirector
keys = python:[key for key in item\
    if key == '_content' or not key.startswith('_')]
copy-keys = python:['_path', '_content_element', '_has_element']

[redirect]
blueprint = plone.app.transmogrifier.redirector

[resolve]
blueprint = collective.transmogrifier.sections.pathresolver
keys =
    _context
    relatedItems


[text]
blueprint = collective.transmogrifier.sections.inserter
key = string:text
condition = python:item.get('_type') != 'Folder' and '_content' in item\
    and 'remoteUrl' not in item
value = python:u'\n'.join([modules['lxml.etree'].tostring(\
        element, method='html', encoding=unicode, pretty_print=True)\
    for element in item['_content']])

[delete-content]
blueprint = collective.transmogrifier.sections.manipulator
condition = exists:item/_content
delete = _content

# Open the cache as a real file for the File and Image types fields
[file]
blueprint = collective.transmogrifier.sections.inserter
key = python:item.get('_type') == 'Image' and 'image' or 'file'
condition = python:'text' not in item and '_cache' in item\
    and item.get('_type') in ('File', 'Image')
value = python:open(item['_cache'])

[update]
blueprint = plone.app.transmogrifier.atschemaupdater

# Close and delete file references to avoid too many open files
[close]
blueprint = collective.transmogrifier.sections.manipulator
condition = python:('file' in item and item['file'].close())\
    or ('image' in item and item['image'].close()) or True
delete =
    file
    image


[transitions]
blueprint = collective.transmogrifier.sections.inserter
key = string:_transitions
# Everything is public and so should be published
value = python:["publish"]
condition = python:item.get('_type') not in ('File', 'Image')

[publish]
blueprint = plone.app.transmogrifier.workflowupdater


[defaultpage]
blueprint = plone.app.transmogrifier.urlnormalizer
source-key = _defaultpage
destination-key = string:_defaultpage
locale = string:en

[browserdefault]
blueprint = plone.app.transmogrifier.browserdefault


[reindexobject]
blueprint = plone.app.transmogrifier.reindexobject


## Import users from Apache users

[htpasswd]
blueprint = collective.transmogrifier.sections.csvsource
# Change this to import users
filename = plone.app.transmogrifier:.htpasswd-users
fmtparam-delimiter = :
fieldnames =
    _login
    _password

[encrypted]
blueprint = collective.transmogrifier.sections.inserter
key = string:_password
condition = exists:item/_password
prefix = {CRYPT}
value = string:${options/prefix}${item/_password}

[roles]
blueprint = collective.transmogrifier.sections.inserter
key = string:_roles
condition = exists:item/_login
value = python:['Member']

[domains]
blueprint = collective.transmogrifier.sections.inserter
key = string:_domains
condition = exists:item/_login
value = python:[]

[groups]
blueprint = collective.transmogrifier.sections.inserter
key = string:_groups
condition = exists:item/_login
value = python:['Site Administrators']

[addUser]
blueprint = collective.transmogrifier.sections.condition
condition = python:not ('_login' in item and '_password' in item) or\
    transmogrifier.context.acl_users._doAddUser(**dict(\
        (key[1:], value) for key, value in item.iteritems()\
        if key.startswith('_'))) and False


[savepoint]
blueprint = collective.transmogrifier.sections.savepoint


## Debugging tools

[debug]
blueprint = collective.transmogrifier.sections.logger
# Change to True to log full items for debugging
condition = python:False
level = INFO
delete = text

[breaker]
blueprint = collective.transmogrifier.sections.breakpoint
# Change to True to log full items for debugging
condition = python:False
