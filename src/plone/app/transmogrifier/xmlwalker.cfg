[transmogrifier]
pipeline =
# Initialize the pipeline
    source
    root

# Beginning of the crawling/spidering recursion
    breaker
    start

# Extract content data from parents
    parent-path
    url
    cleanup-parent
    
# Drop items that shouldn't be crawled/spidered
    log-dropped
    drop

# Retrieve responses from a local cache first, then by requesting a URL
    cache
    log-request
    response
    headers
    cache-headers
    write-cache
    close-response

# Extract content information from response and parsed XML
    parse
    remoteUrl
    title
    id
    defaultpage
    description
    subject
    content
    text
    modificationDate

# Assemble the path and type
    path
    drop-seen
    seen
    unique
    folders
    excludeFromNav

# Parse XML trees for heirarchy/structure and for links to crawl/spider
    walk-content
    content-element

    left-nav
    walk-left-nav

    nav
    walk-nav

    cleanup-trees

# Extract content data from crawled/spidered links for prior to retrieval
    parent
    href
    element-title
    cleanup-crawl

# Send newly crawled/spidered links back to the top, recurse
    crawl

# Add the content
#    blob
    type
    file
    transitions

    debug
    drop-construct
    log-content

    disable_versioning
    construct
    enable_versioning
    redirect
    update
    publish
    browserdefault
    reindexobject
    close
    savepoint


## Initialize the pipeline with a URL to crawl

#    Start the pipeline with a single CSV row
[source]
blueprint = collective.transmogrifier.sections.csvsource
filename = plone.app.transmogrifier:xmlwalker.csv

#    Set the site root URL to start crawling from
[root]
blueprint = collective.transmogrifier.sections.inserter
key = string:_href
condition = python:item.get('_path') == '/'
url = ${root:scheme}://${root:netloc}${root:path}
value = string:${root:url}


## Central crawling loop
#    This is the source for items from links that are crawled
[start]
blueprint = collective.transmogrifier.sections.listsource


## Extract content data from parents
# Any parent information that depends on the parent crawling response
# and is needed by it's children, such as paths, must be extracted
# after the walked items to be crawled get sent back to the list
# source because the crawled items must be exhausted before the list
# source will emit the parents

[parent-path]
blueprint = collective.transmogrifier.sections.inserter
key = string:_parent_path
condition = python:'_parent_path' not in item and (\
    '_path' in item.get('_parent', {})\
    or '_parent_path' in item.get('_parent', {}))
value = python:(item['_parent'].get('_type') == 'Folder'\
    and item.get('_parent')['_path'])\
    or item.get('_parent').get(\
        '_parent_path', item.get('_parent').get('_path'))

[url]
blueprint = collective.transmogrifier.sections.inserter
key = string:_url
condition = exists:item/_href
# Make an absolute URL filling in from the root and parent as appropriate
value = python:item.update(_url=modules['urlparse'].urlsplit(item['_href']))\
    or modules['urlparse'].SplitResult(\
    item['_url'].scheme or '${root:scheme}',\
    item['_url'].netloc or '${root:netloc}',\
    modules['urllib'].quote(modules['posixpath'].abspath(\
        modules['posixpath'].join(\
            modules['posixpath'].dirname(getattr(item.get('_parent', {}).get(\
                '_url'), 'path', '/')) or item.get(\
                    '_parent_path', '${root:path}'),\
             item['_url'].path))), '', '')
        
# Free reference to parent
[cleanup-parent]
blueprint = collective.transmogrifier.sections.manipulator
condition = exists:item/_parent
delete = _parent


## Drop items not to crawl

[log-dropped]
blueprint = collective.transmogrifier.sections.logger
level = INFO
condition = not:${drop:condition}
key = _href

[drop]
blueprint = collective.transmogrifier.sections.condition
ignored-extensions =
condition = python:'_url' not in item or (\
# Drop external links in content, let links in nav become Link content
    (item['_url'].geturl().startswith('${root:url}')\
    or not ${content:element-python})\
# skip certain file types
    and modules['posixpath'].splitext(\
        item['_url'].path or '_.html')[1] not in [\
        ext.strip() for ext in """${drop:ignored-extensions}""".split()\
        if ext.strip()]\
# Don't re-process previously processed links in content
    and (not ${content:element-python}\
         or item['_url'].geturl()\
         not in transmogrifier.__annotations__.get('xmlwalker.paths', {})))


## Get the response for the URL

[cache]
blueprint = collective.transmogrifier.sections.inserter
key = string:_cache
condition = exists:item/_url
value = python:not modules['os.path'].exists(modules['os.path'].dirname(\
    item.setdefault('_cache', modules['os.path'].join(\
        'var', 'xmlwalker', item['_url'].scheme, item['_url'].netloc,\
        modules['os.path'].dirname(item['_url'].path.lstrip('/')),\
        modules['os.path'].basename(item['_url'].path.lstrip('/'))\
        or 'index.html',)))) and modules['os'].makedirs(\
            modules['os.path'].dirname(item['_cache'])) or item['_cache']

[log-request]
blueprint = collective.transmogrifier.sections.logger
level = INFO
condition = ${response:condition}
key = _url

[response]
blueprint = collective.transmogrifier.sections.inserter
key = string:_response
condition = python:'_url' in item\
    and not modules['os.path'].exists(item.get('_cache', ''))
value = python:modules['urllib2'].urlopen(\
    item['_url'].geturl())

# Get response headers from cache if available or populate the cache
[headers]
blueprint = collective.transmogrifier.sections.inserter
key = string:_headers
condition = python:'_cache' in item and '_response' in item
value = python:modules['ConfigParser'].SafeConfigParser(dict(\
    item['_response'].info(), url=item['_response'].geturl(), **dict(
    (name, item['_response'].headers.getparam(name)) for name in\
     item['_response'].headers.getparamnames()))).write(\
        open(item['_cache'] + '.metadata', 'w'))\
    or dict(item['_response'].info())

[cache-headers]
blueprint = collective.transmogrifier.sections.inserter
key = string:_headers
condition = python:'_headers' not in item and '_cache' in item
value = python:item.update(_headers=modules['ConfigParser'].SafeConfigParser())\
    or item['_headers'].read(item['_cache'] + '.metadata')\
    and dict(item['_headers'].defaults())

[write-cache]
blueprint = collective.transmogrifier.sections.inserter
key = string:_cache
# writes the cache file
condition = python:('_response' in item and\
        open(item['_cache'], 'w').writelines(item['_response']))
value = nothing

[close-response]
blueprint = collective.transmogrifier.sections.manipulator
condition = python:'_response' in item and item['_response'].close()
delete = _response

[parse]
blueprint = collective.transmogrifier.sections.inserter
key = string:_tree
condition = python:item.get('_headers') and item.get('_cache')\
    and item['_headers'].get('content-type', '').startswith('text/html')
value = python:modules['lxml.etree'].parse(\
    item['_cache'], modules['lxml.html'].HTMLParser(\
        encoding=item.get('_headers', {}).get('charset', 'utf-8')))


## Extract content data from XML trees

[remoteUrl]
blueprint = collective.transmogrifier.sections.inserter
key = string:remoteUrl
# Use Links for nav elements to external URLs or already crawled internal URLs
condition = python:'_has_element' in item\
    and not ${content:element-python} and '_url' in item\
    and (not item.get('_is_defaultpage')\
         and item['_url'].geturl() in\
         transmogrifier.__annotations__.get('xmlwalker.paths', {}))
value = python:(item['_url'].geturl().startswith("${root:url}")\
    and item['_url'].path) or item['_url'].geturl()

[title]
blueprint = collective.transmogrifier.sections.inserter
# Customise xpath to change title extraction
xpath = /html/head/title
# Keep nav title for folders
#   assume items without types will be folders with default pages when crawled
key = python:item.get('_type') == 'Folder' and '_defaultpage'\
    or 'title'
# Keep nav title for links
condition = python:not item.get('remoteUrl')\
# Use /head/title for everything else
    and '_tree' in item and item['_tree'].xpath("${title:xpath}")
value-python = u' '.join(element.text_content().strip() for element in\
                         item['_tree'].xpath("${title:xpath}"))
value = python:${title:value-python}

[id]
blueprint = plone.app.transmogrifier.urlnormalizer
locale = string:en

[defaultpage]
blueprint = plone.app.transmogrifier.urlnormalizer
source-key = _defaultpage
destination-key = string:_defaultpage
locale = string:en

[description]
blueprint = collective.transmogrifier.sections.inserter
key = string:description
xpath = /html/head/meta[@name='description']/@content
condition = exists:item/_tree
value = python:u' '.join(element.strip() for element in\
    item['_tree'].xpath("${description:xpath}"))

[subject]
blueprint = collective.transmogrifier.sections.inserter
key = string:subject
xpath = /html/head/meta[@name='keywords']/@content
condition = python:'_tree' in item and item['_tree'].xpath("${subject:xpath}")
value = python:u','.join(element.strip() for element in \
    item['_tree'].xpath("${subject:xpath}")).split(',')


## Assemble the path

[path]
blueprint = collective.transmogrifier.sections.inserter
key = string:_path
condition = python:('_path' not in item\
# Overwrite path for front page
    or item.get('_parent_path') == '/')\
    and '_url' in item
value = python:(${content:element-python}\
        and modules['urllib'].unquote(item['_url'].path))\
    or modules['posixpath'].join(\
        item.get('_parent_path', modules['posixpath'].dirname(\
                '_url' in item and modules['urllib'].unquote(item['_url'].path)\
                 or item.get('remoteUrl',\
                     item.get('_path', '${root:path}')))),\
        item.get('_id', modules['posixpath'].basename(\
                 '_url' in item\
                 and modules['urllib'].unquote(item['_url'].path)\
                 or item.get('remoteUrl', item.get('_path')))))

[drop-seen]
blueprint = collective.transmogrifier.sections.condition
condition = python:'_url' not in item or item.get('_path') not in \
    transmogrifier.__annotations__.get('xmlwalker.paths', {}).get(\
        item['_url'].geturl(), set())

[seen]
blueprint = collective.transmogrifier.sections.inserter
key = string:_path
condition = python:'_url' in item and '_path' in item\
# Just add the seen path, don't insert a key
    and transmogrifier.__annotations__.setdefault(\
       'xmlwalker.paths', {}).setdefault(\
           item['_url'].geturl(), set()).add(item['_path'])
value = nothing

[unique]
blueprint = collective.transmogrifier.sections.inserter
key = string:_path
condition = python:item.get('_path', '/') != '/'\
    and transmogrifier.context.restrictedTraverse(\
        item['_path'].lstrip('/'), None) is not None\
# Shoule be a new object if the previous item's path has a different URL
    and ('_url' in item \
         and item['_url'].geturl() not in\
            transmogrifier.__annotations__.get('xmlwalker.paths', {}))
value = python:modules['posixpath'].join(
    modules['posixpath'].dirname(item['_path']),\
    modules['zope.container.interfaces'].INameChooser(\
        transmogrifier.context.restrictedTraverse(\
            modules['posixpath'].dirname(item['_path']).lstrip('/'))\
        ).chooseName(modules['posixpath'].basename(item['_path']), 
            transmogrifier.context.restrictedTraverse(\
                modules['posixpath'].dirname(item['_path']).lstrip('/'))))


## Get links to crawl from content body next

[content]
blueprint = collective.transmogrifier.sections.inserter
key = string:_content
# Don't crawl Folders
condition = python:'_tree' in item and item.get('_type') != 'Folder'\
# Don't crawl Links, also prevents loops on nav Link items
    and 'remoteUrl' not in item
# Customize this xpath expression to isolate the content body elements
xpath = //*[@id='content' or contains(@class, 'content')]/*
value = python:item['_tree'].xpath("${content:xpath}")
# Re-used options
element-keys = _content_element
element-python = [key for key in\
    """${content:element-keys}""".split()\
    if key.strip() in item]

[text]
blueprint = collective.transmogrifier.sections.inserter
key = string:text
condition = python:item.get('_type') != 'Folder' and '_content' in item\
    and 'remoteUrl' not in item
value = python:u'\n'.join([modules['lxml.etree'].tostring(\
        element, method='html', encoding=unicode, pretty_print=True)\
    for element in item['_content']])

[walk-content]
blueprint = collective.transmogrifier.sections.xmlwalker
trees-key = _content
key = string:_content_element
type-key = nothing
is-default-page-key = nothing

[content-element]
blueprint = collective.transmogrifier.sections.inserter
key = string:_element
condition = python:'_content_element' in item and not '_cache' in item
value = python:item.update(_element=item['_content_element'])\
    or item.update(_content_element=len(item['_content_element']))\
    or item['_element']


## Get links to crawl from left navigation list

[left-nav]
blueprint = collective.transmogrifier.sections.inserter
key = string:_left_nav
condition = ${content:condition}
# Customize this xpath expression to isolate the left navigation elements
xpath = //ul[contains(@class, 'nav-list')]
value = python:item['_tree'].xpath("${left-nav:xpath}")

[walk-left-nav]
blueprint = collective.transmogrifier.sections.xmlwalker
trees-key = _left_nav
cache = true


## Get links to crawl from site nav first

[nav]
blueprint = collective.transmogrifier.sections.inserter
key = string:_nav
condition = ${content:condition}
# Customize this xpath expression to isolate the navigation elements
xpath = //*[contains(@class, 'navbar')]//ul[contains(@class, 'nav')]
value = python:item['_tree'].xpath("${nav:xpath}")

[walk-nav]
blueprint = collective.transmogrifier.sections.xmlwalker
trees-key = _nav
cache = true


## Free/remove memory intensive XML tree references
[cleanup-trees]
blueprint = collective.transmogrifier.sections.inserter
key = string:_has_response
keys =
    _tree
    _nav
    _left_nav
    _content
condition = python:item.update(\
    ('_has' + key.strip(), bool(item.pop(key.strip()))) for key in\
    """${cleanup-trees:keys}""".split() if key.strip() in item)
value = nothing


## Get everything we need from memory intensive parent/child references

[parent]
blueprint = collective.transmogrifier.sections.inserter
key = string:_parent
# Content links are always relative to crawled page
condition = python:${content:element-python}\
    and '_parent' in item.get('_parent', {})
value = item/_parent/_parent

[href]
blueprint = collective.transmogrifier.sections.inserter
key = string:_href
xpath = (@href | @src)[.!='' and not(starts-with(., '#'))]
condition = python:'_element' in item\
    and item['_element'].xpath("${href:xpath}")
value = python:' '.join(item['_element'].xpath("${href:xpath}")).strip()

[element-title]
blueprint = collective.transmogrifier.sections.inserter
key = string:title
condition = python:not item.get('title')\
    and '_element' in item and '_href' in item
value = python:unicode(item['_element'].text_content().strip()\
                       or item['_element'].attrib.get('alt', '').strip())


## Free/remove memory intensive references
[cleanup-crawl]
blueprint = collective.transmogrifier.sections.inserter
key = string:_has_element
condition = exists:item/_element
value = python:len(item.pop('_element'))


## Send child items back to the top of the crawl loop
[crawl]
blueprint = collective.transmogrifier.sections.listappender
condition = python:'_cache' not in item and '_href' in item
section = start


## Get content data that doesn't require XML trees

[type]
blueprint = collective.transmogrifier.sections.inserter
key = string:_type
# How much of the body to classify,
#   default to the OFS.Image.File linked Pdata chunk size
size = 65536
findTypeName = transmogrifier.context.content_type_registry.findTypeName(\
# Use the extension of the original URL
    getattr(item.get('_url'), 'path', '')\
# Remote URLs should be Links, use a *.url extension
    + (('remoteUrl' in item and not item.get('_is_defaultpage')\
        and item.get('_type') != 'Folder' and '.url') or ''),\
# Use MIME type from respone
    item.get('_headers', {}).get('content-type', ''),\
# Read only some of the file for classification
    item.get('text',\
        '_cache' in item and open(item['_cache']).read(${type:size})\
        or ''))
condition = python:not item.get('_type') and ${type:findTypeName}
value = python:${type:findTypeName}

[modificationDate]
blueprint = collective.transmogrifier.sections.inserter
key = string:modificationDate
condition = python:'_headers' in item and item['_headers'].get('last-modified')
value = python:item['_headers']['last-modified']

[folders]
blueprint = collective.transmogrifier.sections.folders

[excludeFromNav]
blueprint = collective.transmogrifier.sections.inserter
key = string:excludeFromNav
# Exclude by default
value = python:True
# Exceptions are all items in the navbar
condition = python:'excludeFromNav' not in item\
    and ('_has_element' not in item\
         or ${content:element-python})

# Open the cache as a real file for the File and Image types fields
[file]
blueprint = collective.transmogrifier.sections.inserter
key = python:(item.get('_type') == 'Image' and 'image')\
    or (item.get('_type') == 'File' and 'file')
condition = python:key and 'text' not in item and '_cache' in item
value = python:open(item['_cache'])

[transitions]
blueprint = collective.transmogrifier.sections.inserter
key = string:_transitions
# Assume all crawled links should be published
value = python:["publish"]
condition = python:'_has_element' in item\
    and item.get('_type') not in ('File', 'Image')


## Add the content

[drop-construct]
blueprint = collective.transmogrifier.sections.manipulator
# Do not add content for the portal itself
condition = python:item.get('_path') == '/'
delete = _type

[log-content]
blueprint = collective.transmogrifier.sections.logger
level = INFO
condition = python:item.get('_path') and item.get('_type')
key = _path

[redirect]
blueprint = plone.app.transmogrifier.redirector

[disable_versioning]
blueprint = plone.app.transmogrifier.versioning.disable

[construct]
blueprint = collective.transmogrifier.sections.constructor

[enable_versioning]
blueprint = plone.app.transmogrifier.versioning.enable

[update]
blueprint = plone.app.transmogrifier.atschemaupdater

[publish]
blueprint = plone.app.transmogrifier.workflowupdater
transitions = submit publish

[browserdefault]
blueprint = plone.app.transmogrifier.browserdefault

[reindexobject]
blueprint = plone.app.transmogrifier.reindexobject

# Close and cleanup file references to avoid too many open files
[close]
blueprint = collective.transmogrifier.sections.manipulator
condition = python:'file' in item and item['file'].close()\
    or 'image' in item and item['image'].close()
delete =
    file
    image

[savepoint]
blueprint = collective.transmogrifier.sections.savepoint


## Debugging tools

[debug]
blueprint = collective.transmogrifier.sections.logger
# Change to True to log full items for debugging
condition = python:False
level = INFO
delete = text

[breaker]
blueprint = collective.transmogrifier.sections.breakpoint
# Change to True to log full items for debugging
condition = python:False
